generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleType {
  SALES
  MANAGER
  INVENTORY_STAFF
  STORE_MANAGER
}
// declared an enum for type safety of roles

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String    
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  roleId        Int       
  phone         String?
  createdAt     DateTime  @default(now())
  stores        Store[]
  role          Role      @relation(fields: [roleId], references: [roleId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Role {
  roleId   Int        @id @default(autoincrement())
  roleType RoleType
  employee Employee[] // Many employees of the same role type

  User User[]
}

model Inventory {
  invId          Int      @id @default(autoincrement())
  storeId        Int      @unique
  invItem        String
  invItemBrand   String
  invItemStock   Int
  invItemPrice   Int
  invItemType    String
  invCreatedDate DateTime
  invItemBarcode Int
  invItemSize    Int
  invAdditional  Json?
  store          Store    @relation(fields: [storeId], references: [storeId])
  sales          Sale[]
}

model Store {
  storeId        Int      @id @default(autoincrement()) @map("storeid")
  storeName      String   @map("storename")
  storeLocation  String   @map("storelocation")
  storeManagerId String   @map("storemanagerid")
  storeStatus    Boolean  @map("storestatus")
  createdAt      DateTime @map("createdat")

  manager   User       @relation(fields: [storeManagerId], references: [id])
  employees Employee[]
  inventory Inventory?
  sales     Sale[]

  @@unique([storeId, storeManagerId]) // Composite unique constraint
  @@map(name: "store") // Map Prisma model to the PostgreSQL table
}

model Sale {
  saleId       Int       @id @default(autoincrement())
  storeId      Int
  saleDate     DateTime
  invId        Int
  saleQuantity Int
  salePrice    Int
  store        Store     @relation(fields: [storeId], references: [storeId])
  inventory    Inventory @relation(fields: [invId], references: [invId])
}

model Employee {
  empId          Int      @id @default(autoincrement()) @map("empid") // Automatically incrementing employee ID
  storeId        Int      @map("storeid") // Foreign key to the Store table
  roleId         Int      @map("roleid") // Foreign key to the Role table
  createdAt      DateTime @default(now()) @map("createdat") // Default created timestamp
  empName        String   @map("empname") // Employee name
  empPhone       String   @map("empphone") // Employee phone number
  empStatus      Boolean  @map("empstatus") // Status of the employee
  storeManagerId String   @map("storemanagerid") // Manager ID for partitioning

  // Relationships
  store Store @relation(fields: [storeId, storeManagerId], references: [storeId, storeManagerId]) // Composite foreign key
  role  Role  @relation(fields: [roleId], references: [roleId]) // Foreign key to Role

  @@unique([storeManagerId, empId]) // Composite unique constraint for primary key
  @@map(name: "employee") // Map Prisma model to the PostgreSQL table
}
