generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          String    @default("USER")
  phone         String?
  createdAt     DateTime  @default(now())
  stores        Store[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Role {
  roleId   BigInt    @id @default(autoincrement())
  roleType String
  employee Employee?
}

model Inventory {
  invId          BigInt   @id @default(autoincrement())
  storeId        BigInt   @unique
  invItem        String
  invItemBrand   String
  invItemStock   Int
  invItemPrice   Int
  invItemType    String
  invCreatedDate DateTime
  invItemBarcode Int
  invItemSize    Int
  invAdditional  Json?
  store          Store    @relation(fields: [storeId], references: [storeId])
  sales          Sale[]
}

model Store {
  storeId       BigInt     @id @default(autoincrement())
  storeName     String
  storeLocation String
  storeManagerId String
  storeStatus   Boolean
  createdAt     DateTime
  manager       User       @relation(fields: [storeManagerId], references: [id])
  employees     Employee[]
  inventory     Inventory?
  sales         Sale[]
}

model Sale {
  saleId      BigInt    @id @default(autoincrement())
  storeId     BigInt
  saleDate    DateTime
  invId       BigInt
  saleQuantity BigInt
  salePrice   BigInt
  store       Store     @relation(fields: [storeId], references: [storeId])
  inventory   Inventory @relation(fields: [invId], references: [invId])
}

model Employee {
  empId     BigInt   @id @default(autoincrement())
  storeId   BigInt
  roleId    BigInt   @unique
  createdAt DateTime
  empName   String
  empPhone  String
  empStatus Boolean
  store     Store    @relation(fields: [storeId], references: [storeId])
  role      Role     @relation(fields: [roleId], references: [roleId])
}