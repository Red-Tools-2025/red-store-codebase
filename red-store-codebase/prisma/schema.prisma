generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String
  emailVerified DateTime?
  image         String?
  roleId        Int
  phone         String?
  createdAt     DateTime  @default(now())
  accounts      Account[]
  sessions      Session[]
  role          Role      @relation(fields: [roleId], references: [roleId])
  store         Store[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Role {
  roleId   Int      @id @default(autoincrement())
  roleType RoleType
  User     User[]
}

model Inventory {
  invId          Int           @default(autoincrement()) @map("invid")
  storeId        Int           @map("storeid")
  storeManagerId String        @map("storemanagerid")
  invItem        String        @map("invitem") @db.VarChar(255)
  invItemBrand   String?       @map("invitembrand") @db.VarChar(255)
  invItemStock   Int           @map("invitemstock")
  invItemPrice   Int           @map("invitemprice")
  invItemType    String?       @map("invitemtype") @db.VarChar(100)
  invCreatedDate DateTime?     @default(now()) @map("invcreateddate") @db.Timestamp(6)
  invItemBarcode String?       @map("invitembarcode") @db.VarChar(255)
  invAdditional  Json?         @map("invadditional") @db.Json
  favorites      favorites[]
  buckets        Bucket[]      
  store          Store         @relation(fields: [storeId, storeManagerId], references: [storeId, storeManagerId], onDelete: Cascade, onUpdate: NoAction, map: "fk_store_inventory")

  @@id([storeId, invId])
  @@map("inventory")
}

model Store {
  storeId        Int         @default(autoincrement()) @map("storeid")
  storeName      String      @map("storename")
  storeLocation  String?     @map("storelocation")
  storeManagerId String      @map("storemanagerid")
  storeStatus    Boolean     @map("storestatus")
  createdAt      DateTime?   @default(now()) @map("createdat") @db.Timestamptz(6)
  customfields   Json?
  buckets        Bucket[]
  favorites      favorites[]
  inventory      Inventory[]
  User           User        @relation(fields: [storeManagerId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

  @@id([storeId, storeManagerId])
  @@map("store")
}

model Sale {
  saleId         Int      @id @default(autoincrement())
  storeId        Int
  saleDate       DateTime
  invId          Int
  saleQuantity   Int
  salePrice      Int
  storeManagerId String
}

model Employee {
  empId          Int       @default(autoincrement()) @map("empid")
  storeId        Int       @map("storeid")
  createdAt      DateTime? @default(now()) @map("createdat") @db.Timestamp(6)
  empName        String    @map("empname") @db.VarChar(255)
  empPhone       String    @map("empphone") @db.VarChar(50)
  empStatus      Boolean   @map("empstatus")
  storeManagerId String    @map("storemanagerid") @db.VarChar(255)
  roleId         Int[]     @map("roleid")

  @@id([storeId, empId])
  @@map("employee")
}

model favorites {
  favid          Int       @default(autoincrement())
  storeid        Int
  storemanagerid String
  invid          Int
  invitem        String
  invitembrand   String?
  addedat        DateTime? @default(now()) @db.Timestamp(6)
  inventory      Inventory @relation(fields: [storeid, invid], references: [storeId, invId], onDelete: Cascade, onUpdate: NoAction, map: "fk_inventory_favorites")
  store          Store     @relation(fields: [storeid, storemanagerid], references: [storeId, storeManagerId], onDelete: Cascade, onUpdate: NoAction, map: "fk_store_favorites")

  @@id([storeid, favid])
}

model Bucket {
  bucketId       Int           @default(autoincrement())
  storeId        Int
  invId          Int
  bucketSize     BucketSize
  createdAt      DateTime      @default(now()) @db.Timestamp(6)
  soldQty        Int
  status         BucketStatus
  scheduledTime  DateTime
  storeManagerId String
  duration       Int
  store          Store         @relation(fields: [storeId, storeManagerId], references: [storeId, storeManagerId], onDelete: NoAction, onUpdate: NoAction, map: "fk_store_bucket")
  inventory      Inventory     @relation(fields: [storeId, invId], references: [storeId, invId], onDelete: Cascade, onUpdate: Cascade, map: "fk_bucket_item_id")

  @@id([storeId, bucketId])
}

enum BucketSize {
  FIFTY
  HUNDRED
  ONE_FIFTY
}

enum BucketStatus {
  ACTIVE
  INACTIVE
  COMPLETED
}

enum RoleType {
  SALES
  MANAGER
  INVENTORY_STAFF
  STORE_MANAGER
}
